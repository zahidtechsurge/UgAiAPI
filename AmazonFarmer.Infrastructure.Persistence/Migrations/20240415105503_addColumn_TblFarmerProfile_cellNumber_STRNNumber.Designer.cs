// <auto-generated />
using System;
using AmazonFarmer.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AmazonFarmer.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AmazonFarmerContext))]
    [Migration("20240415105503_addColumn_TblFarmerProfile_cellNumber_STRNNumber")]
    partial class addColumn_TblFarmerProfile_cellNumber_STRNNumber
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblAttachment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("tblAttachmentTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("tblAttachmentTypeID");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblAttachmentTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AttachmentTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            TypeName = "User Attachment"
                        },
                        new
                        {
                            ID = 2,
                            TypeName = "Farm Attachment"
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblAuthorityLetterDetails", b =>
                {
                    b.Property<int>("RecID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecID"), 1L, 1);

                    b.Property<int>("AuthorityLetterID")
                        .HasColumnType("int");

                    b.Property<int>("BagQuantity")
                        .HasColumnType("int");

                    b.Property<int>("BiltyNo")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("TblProductID")
                        .HasColumnType("int");

                    b.Property<string>("TruckerNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WareHouseID")
                        .HasColumnType("int");

                    b.Property<int?>("tblServiceID")
                        .HasColumnType("int");

                    b.HasKey("RecID");

                    b.HasIndex("AuthorityLetterID");

                    b.HasIndex("ProductID");

                    b.HasIndex("TblProductID");

                    b.HasIndex("tblServiceID");

                    b.ToTable("AuthorityLetterDetails");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblAuthorityLetters", b =>
                {
                    b.Property<int>("AuthorityLetterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorityLetterID"), 1L, 1);

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("AuthorityLetterNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BearerNIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BearerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DealerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldWHIncharge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INVNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOCRAutomated")
                        .HasColumnType("bit");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("AuthorityLetterID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("OrderID");

                    b.ToTable("AuthorityLetters");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBanner", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Banners");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Banner 1",
                            Status = 1
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBannerLanguages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BannerID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("BannerID");

                    b.HasIndex("LanguageCode");

                    b.ToTable("BannerLanguages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BannerID = 1,
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9cD-r13pJWK--ScPagu2uFM7UQ0yjPpRhEktsO0e5vRb0KeULOexclEBcw2qq4YkyYjI&usqp=CAU",
                            LanguageCode = "EN"
                        },
                        new
                        {
                            ID = 2,
                            BannerID = 1,
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9cD-r13pJWK--ScPagu2uFM7UQ0yjPpRhEktsO0e5vRb0KeULOexclEBcw2qq4YkyYjI&usqp=CAU",
                            LanguageCode = "UR"
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DistrictID = 1,
                            Name = "Karachi",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            DistrictID = 1,
                            Name = "Hyderabad",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            DistrictID = 1,
                            Name = "Sukkur",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            DistrictID = 1,
                            Name = "Larkana",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            DistrictID = 1,
                            Name = "Nawabshah",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            DistrictID = 1,
                            Name = "Mirpur Khas",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            DistrictID = 2,
                            Name = "Lahore",
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            DistrictID = 2,
                            Name = "Faisalabad",
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            DistrictID = 2,
                            Name = "Rawalpindi",
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            DistrictID = 2,
                            Name = "Multan",
                            Status = 1
                        },
                        new
                        {
                            ID = 11,
                            DistrictID = 2,
                            Name = "Gujranwala",
                            Status = 1
                        },
                        new
                        {
                            ID = 12,
                            DistrictID = 2,
                            Name = "Bahawalpur",
                            Status = 1
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCityLanguages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CityLanguages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CityID = 1,
                            LanguageCode = "EN",
                            Translation = "Karachi"
                        },
                        new
                        {
                            ID = 2,
                            CityID = 2,
                            LanguageCode = "EN",
                            Translation = "Hyderabad"
                        },
                        new
                        {
                            ID = 3,
                            CityID = 3,
                            LanguageCode = "EN",
                            Translation = "Sukkur"
                        },
                        new
                        {
                            ID = 4,
                            CityID = 4,
                            LanguageCode = "EN",
                            Translation = "Larkana"
                        },
                        new
                        {
                            ID = 5,
                            CityID = 5,
                            LanguageCode = "EN",
                            Translation = "Nawabshah"
                        },
                        new
                        {
                            ID = 6,
                            CityID = 6,
                            LanguageCode = "EN",
                            Translation = "Mirpur Khas"
                        },
                        new
                        {
                            ID = 7,
                            CityID = 1,
                            LanguageCode = "UR",
                            Translation = "کراچی"
                        },
                        new
                        {
                            ID = 8,
                            CityID = 2,
                            LanguageCode = "UR",
                            Translation = "حیدرآباد"
                        },
                        new
                        {
                            ID = 9,
                            CityID = 3,
                            LanguageCode = "UR",
                            Translation = "شکر"
                        },
                        new
                        {
                            ID = 10,
                            CityID = 4,
                            LanguageCode = "UR",
                            Translation = "کانپنا"
                        },
                        new
                        {
                            ID = 11,
                            CityID = 5,
                            LanguageCode = "UR",
                            Translation = "نواب شاہ"
                        },
                        new
                        {
                            ID = 12,
                            CityID = 6,
                            LanguageCode = "UR",
                            Translation = "میرپور خاص"
                        },
                        new
                        {
                            ID = 13,
                            CityID = 7,
                            LanguageCode = "EN",
                            Translation = "Lahore"
                        },
                        new
                        {
                            ID = 14,
                            CityID = 8,
                            LanguageCode = "EN",
                            Translation = "Faisalabad"
                        },
                        new
                        {
                            ID = 15,
                            CityID = 9,
                            LanguageCode = "EN",
                            Translation = "Rawalpindi"
                        },
                        new
                        {
                            ID = 16,
                            CityID = 10,
                            LanguageCode = "EN",
                            Translation = "Multan"
                        },
                        new
                        {
                            ID = 17,
                            CityID = 11,
                            LanguageCode = "EN",
                            Translation = "Gujranwala"
                        },
                        new
                        {
                            ID = 18,
                            CityID = 12,
                            LanguageCode = "EN",
                            Translation = "Bahawalpur"
                        },
                        new
                        {
                            ID = 19,
                            CityID = 7,
                            LanguageCode = "UR",
                            Translation = "لاہور"
                        },
                        new
                        {
                            ID = 20,
                            CityID = 8,
                            LanguageCode = "UR",
                            Translation = "فیصل آباد"
                        },
                        new
                        {
                            ID = 21,
                            CityID = 9,
                            LanguageCode = "UR",
                            Translation = "راولپنڈی"
                        },
                        new
                        {
                            ID = 22,
                            CityID = 10,
                            LanguageCode = "UR",
                            Translation = "ملتان"
                        },
                        new
                        {
                            ID = 23,
                            CityID = 11,
                            LanguageCode = "UR",
                            Translation = "گرینولا"
                        },
                        new
                        {
                            ID = 24,
                            CityID = 12,
                            LanguageCode = "UR",
                            Translation = "بہاولپور"
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblClaim", b =>
                {
                    b.Property<string>("ClaimId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.HasKey("ClaimId");

                    b.HasIndex("PageId");

                    b.ToTable("tblClaim", (string)null);

                    b.HasData(
                        new
                        {
                            ClaimId = "63d97de3-54ad-4d81-b6e5-3f94c4e22515",
                            ClaimDescription = "Employee Dashboard",
                            PageId = 1
                        },
                        new
                        {
                            ClaimId = "e28bf186-99f1-49c2-aef1-1c88d020cc69",
                            ClaimDescription = "Farmer Dashboard",
                            PageId = 2
                        },
                        new
                        {
                            ClaimId = "e7b4543e-f884-4da2-a8a3-75189981bccf",
                            ClaimDescription = "Create Farmer",
                            PageId = 3
                        },
                        new
                        {
                            ClaimId = "6ffc4e4b-c2b6-4fb1-b0f4-65d9472cba17",
                            ClaimDescription = "Farmer Listing",
                            PageId = 4
                        },
                        new
                        {
                            ClaimId = "674b8bea-c21b-4a2b-a16b-8ac2fc382c32",
                            ClaimDescription = "Role Manager",
                            PageId = 5
                        },
                        new
                        {
                            ClaimId = "6dea7f8b-a4af-436c-bdbd-bfe3dd8215d1",
                            ClaimDescription = "get Roles",
                            PageId = 6
                        },
                        new
                        {
                            ClaimId = "0f845fc3-0fbb-4939-8f5f-cb720d9e9517",
                            ClaimDescription = "Permission Manager",
                            PageId = 7
                        },
                        new
                        {
                            ClaimId = "f00c42ba-d2ae-4cee-bb55-ef9678bcfcb4",
                            ClaimDescription = "get Permissions By RoleID",
                            PageId = 8
                        },
                        new
                        {
                            ClaimId = "0099a508-30eb-4d7c-9a43-49b7fa87c9f7",
                            ClaimDescription = "update Permissions",
                            PageId = 9
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblClaimAction", b =>
                {
                    b.Property<string>("ClaimActionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClaimActionId");

                    b.HasIndex("ClaimId");

                    b.ToTable("tblClaimAction", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCrop", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Crops");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Wheat",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            Name = "Sunflower",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            Name = "Cotton",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            Name = "Sugarcane",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            Name = "Onion",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            Name = "Tomato",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            Name = "Potato",
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            Name = "Rice",
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            Name = "Chillies",
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            Name = "Soyabean",
                            Status = 1
                        },
                        new
                        {
                            ID = 11,
                            Name = "Bajra",
                            Status = 1
                        },
                        new
                        {
                            ID = 12,
                            Name = "Jowar",
                            Status = 1
                        },
                        new
                        {
                            ID = 13,
                            Name = "Garlic",
                            Status = 1
                        },
                        new
                        {
                            ID = 14,
                            Name = "Coriander",
                            Status = 1
                        },
                        new
                        {
                            ID = 15,
                            Name = "Barley",
                            Status = 1
                        },
                        new
                        {
                            ID = 16,
                            Name = "Maize",
                            Status = 1
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCropTimings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CropID")
                        .HasColumnType("int");

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeasonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CropID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("SeasonID");

                    b.ToTable("CropTimings");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CropID = 1,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1168),
                            SeasonID = 1,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1169)
                        },
                        new
                        {
                            ID = 2,
                            CropID = 2,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1171),
                            SeasonID = 1,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1171)
                        },
                        new
                        {
                            ID = 3,
                            CropID = 3,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1173),
                            SeasonID = 1,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1173)
                        },
                        new
                        {
                            ID = 4,
                            CropID = 4,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1174),
                            SeasonID = 1,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1175)
                        },
                        new
                        {
                            ID = 5,
                            CropID = 5,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1176),
                            SeasonID = 1,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1177)
                        },
                        new
                        {
                            ID = 6,
                            CropID = 6,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1178),
                            SeasonID = 1,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1178)
                        },
                        new
                        {
                            ID = 7,
                            CropID = 7,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1180),
                            SeasonID = 1,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1180)
                        },
                        new
                        {
                            ID = 8,
                            CropID = 8,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1181),
                            SeasonID = 1,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1182)
                        },
                        new
                        {
                            ID = 9,
                            CropID = 9,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1183),
                            SeasonID = 1,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1183)
                        },
                        new
                        {
                            ID = 10,
                            CropID = 10,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1185),
                            SeasonID = 2,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1185)
                        },
                        new
                        {
                            ID = 11,
                            CropID = 11,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1186),
                            SeasonID = 2,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1187)
                        },
                        new
                        {
                            ID = 12,
                            CropID = 12,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1194),
                            SeasonID = 2,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1194)
                        },
                        new
                        {
                            ID = 13,
                            CropID = 13,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1196),
                            SeasonID = 2,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1200)
                        },
                        new
                        {
                            ID = 14,
                            CropID = 14,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1216),
                            SeasonID = 2,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1217)
                        },
                        new
                        {
                            ID = 15,
                            CropID = 15,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1218),
                            SeasonID = 2,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1219)
                        },
                        new
                        {
                            ID = 16,
                            CropID = 16,
                            DistrictID = 1,
                            FromDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1220),
                            SeasonID = 2,
                            ToDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1220)
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCropTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CropID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CropID");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CropTranslation");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CropID = 1,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Wheat"
                        },
                        new
                        {
                            ID = 2,
                            CropID = 2,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Sunflower"
                        },
                        new
                        {
                            ID = 3,
                            CropID = 3,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Cotton"
                        },
                        new
                        {
                            ID = 4,
                            CropID = 4,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Sugarcane"
                        },
                        new
                        {
                            ID = 5,
                            CropID = 5,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Onion"
                        },
                        new
                        {
                            ID = 6,
                            CropID = 6,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Tomato"
                        },
                        new
                        {
                            ID = 7,
                            CropID = 7,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Potato"
                        },
                        new
                        {
                            ID = 8,
                            CropID = 8,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Rice"
                        },
                        new
                        {
                            ID = 9,
                            CropID = 9,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Chillies"
                        },
                        new
                        {
                            ID = 10,
                            CropID = 10,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Soyabean"
                        },
                        new
                        {
                            ID = 11,
                            CropID = 11,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Bajra"
                        },
                        new
                        {
                            ID = 12,
                            CropID = 12,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Jowar"
                        },
                        new
                        {
                            ID = 13,
                            CropID = 13,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Garlic"
                        },
                        new
                        {
                            ID = 14,
                            CropID = 14,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Coriander"
                        },
                        new
                        {
                            ID = 15,
                            CropID = 15,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Barley"
                        },
                        new
                        {
                            ID = 16,
                            CropID = 16,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            Text = "Maize"
                        },
                        new
                        {
                            ID = 17,
                            CropID = 1,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "گندم"
                        },
                        new
                        {
                            ID = 18,
                            CropID = 2,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "سورج مکھی"
                        },
                        new
                        {
                            ID = 19,
                            CropID = 3,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "کپاس"
                        },
                        new
                        {
                            ID = 20,
                            CropID = 4,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "گنا"
                        },
                        new
                        {
                            ID = 21,
                            CropID = 5,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "پیاز"
                        },
                        new
                        {
                            ID = 22,
                            CropID = 6,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "ٹماٹر"
                        },
                        new
                        {
                            ID = 23,
                            CropID = 7,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "آلو"
                        },
                        new
                        {
                            ID = 24,
                            CropID = 8,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "چاول"
                        },
                        new
                        {
                            ID = 25,
                            CropID = 9,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "مرچیں"
                        },
                        new
                        {
                            ID = 26,
                            CropID = 10,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "سویا بین"
                        },
                        new
                        {
                            ID = 27,
                            CropID = 11,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "باجرہ"
                        },
                        new
                        {
                            ID = 28,
                            CropID = 12,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "جوار"
                        },
                        new
                        {
                            ID = 29,
                            CropID = 13,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "Garlic"
                        },
                        new
                        {
                            ID = 30,
                            CropID = 14,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "Coriander"
                        },
                        new
                        {
                            ID = 31,
                            CropID = 15,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "Barley"
                        },
                        new
                        {
                            ID = 32,
                            CropID = 16,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            Text = "Maize"
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblDistrict", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("District");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Sindh",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            Name = "Punjab",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            Name = "Khyber Pakhtunkhwa (KP)",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            Name = "Balochistan",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            Name = "Gilgit-Baltistan (GB)",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            Name = "Azad Jammu and Kashmir (AJK)",
                            Status = 1
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblDistrictLanguages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("LanguageCode");

                    b.ToTable("DistrictLanguages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DistrictID = 1,
                            LanguageCode = "EN",
                            Translation = "Sindh"
                        },
                        new
                        {
                            ID = 2,
                            DistrictID = 2,
                            LanguageCode = "EN",
                            Translation = "Punjab"
                        },
                        new
                        {
                            ID = 3,
                            DistrictID = 3,
                            LanguageCode = "EN",
                            Translation = "Khyber Pakhtunkhwa"
                        },
                        new
                        {
                            ID = 4,
                            DistrictID = 4,
                            LanguageCode = "EN",
                            Translation = "Balochistan"
                        },
                        new
                        {
                            ID = 5,
                            DistrictID = 5,
                            LanguageCode = "EN",
                            Translation = "Gilgit-Baltistan"
                        },
                        new
                        {
                            ID = 6,
                            DistrictID = 6,
                            LanguageCode = "EN",
                            Translation = "Azad Jammu and Kashmir"
                        },
                        new
                        {
                            ID = 7,
                            DistrictID = 1,
                            LanguageCode = "UR",
                            Translation = "سندھ"
                        },
                        new
                        {
                            ID = 8,
                            DistrictID = 2,
                            LanguageCode = "UR",
                            Translation = "پنجاب"
                        },
                        new
                        {
                            ID = 9,
                            DistrictID = 3,
                            LanguageCode = "UR",
                            Translation = "خیبر پختونخواہ"
                        },
                        new
                        {
                            ID = 10,
                            DistrictID = 4,
                            LanguageCode = "UR",
                            Translation = "بلوچستان"
                        },
                        new
                        {
                            ID = 11,
                            DistrictID = 5,
                            LanguageCode = "UR",
                            Translation = "گلگت بلتستان"
                        },
                        new
                        {
                            ID = 12,
                            DistrictID = 6,
                            LanguageCode = "UR",
                            Translation = "آزاد جموں و کشمیر"
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblfarm", b =>
                {
                    b.Property<int>("FarmID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmID"), 1L, 1);

                    b.Property<double>("Acreage")
                        .HasColumnType("float");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApplicationID")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("FarmName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SAPFarmCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TehsilID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("isFarmApprovalAcknowledged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("isFarmApprovalAcknowledgedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isLeased")
                        .HasColumnType("bit");

                    b.Property<bool>("isPrimary")
                        .HasColumnType("bit");

                    b.Property<double?>("latitude")
                        .HasColumnType("float");

                    b.Property<double?>("longitude")
                        .HasColumnType("float");

                    b.Property<int?>("tblDistrictID")
                        .HasColumnType("int");

                    b.Property<int?>("tblTehsilID")
                        .HasColumnType("int");

                    b.HasKey("FarmID");

                    b.HasIndex("ApplicationID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CityID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("TehsilID");

                    b.HasIndex("UserID");

                    b.HasIndex("tblDistrictID");

                    b.HasIndex("tblTehsilID");

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmApplication", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ApplicationTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("FarmApplication");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmAttachments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AttachmentID")
                        .HasColumnType("int");

                    b.Property<int>("FarmID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AttachmentID");

                    b.HasIndex("FarmID");

                    b.ToTable("FarmAttachments");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmChangeRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<double>("Acreage")
                        .HasColumnType("float");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicationID")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<int?>("FarmID")
                        .HasColumnType("int");

                    b.Property<string>("FarmName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<string>("SAPFarmCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TehsilID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("isFarmApprovalAcknowledged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("isFarmApprovalAcknowledgedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isLeased")
                        .HasColumnType("bit");

                    b.Property<bool>("isPrimary")
                        .HasColumnType("bit");

                    b.Property<int?>("tblDistrictID")
                        .HasColumnType("int");

                    b.Property<int?>("tblTehsilID")
                        .HasColumnType("int");

                    b.Property<int?>("tblfarmFarmID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CityID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("FarmID");

                    b.HasIndex("TehsilID");

                    b.HasIndex("UserID");

                    b.HasIndex("tblDistrictID");

                    b.HasIndex("tblTehsilID");

                    b.HasIndex("tblfarmFarmID");

                    b.ToTable("FarmChangeRequests");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tblFarmerClaim", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("tblFarmerLogin", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmerProfile", b =>
                {
                    b.Property<int>("ProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileID"), 1L, 1);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CNICNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeasedLand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NTNNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnedLand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SAPFarmerCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("STRNNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedLangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalArea")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isApproved")
                        .HasColumnType("bit");

                    b.Property<int?>("tblTehsilID")
                        .HasColumnType("int");

                    b.HasKey("ProfileID");

                    b.HasIndex("CityID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("UserID");

                    b.HasIndex("tblTehsilID");

                    b.ToTable("FarmerProfile");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("tblFarmerRole", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("tblFarmerToken", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblHomeSlider", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("HomeSliders");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblHomeSliderLanguages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("HomeSliderID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("HomeSliderID");

                    b.HasIndex("LanguageCode");

                    b.ToTable("HomeSliderLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblIntro", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Intros");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "First",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            Name = "Second",
                            Status = 1
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblIntroLanguages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntroID")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("IntroID");

                    b.HasIndex("LanguageCode");

                    b.ToTable("IntroLanguages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9cD-r13pJWK--ScPagu2uFM7UQ0yjPpRhEktsO0e5vRb0KeULOexclEBcw2qq4YkyYjI&usqp=CAU",
                            IntroID = 1,
                            LanguageCode = "EN",
                            Text = "There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable."
                        },
                        new
                        {
                            ID = 2,
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9cD-r13pJWK--ScPagu2uFM7UQ0yjPpRhEktsO0e5vRb0KeULOexclEBcw2qq4YkyYjI&usqp=CAU",
                            IntroID = 1,
                            LanguageCode = "UR",
                            Text = "Lorem Ipsum کے اقتباسات کے بہت سے تغیرات دستیاب ہیں، لیکن اکثریت کو کسی نہ کسی شکل میں، انجکشن شدہ مزاح، یا بے ترتیب الفاظ کے ذریعے تبدیلی کا سامنا کرنا پڑا ہے جو قدرے قابل اعتبار بھی نہیں لگتے ہیں۔"
                        },
                        new
                        {
                            ID = 3,
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9cD-r13pJWK--ScPagu2uFM7UQ0yjPpRhEktsO0e5vRb0KeULOexclEBcw2qq4YkyYjI&usqp=CAU",
                            IntroID = 2,
                            LanguageCode = "EN",
                            Text = "There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable."
                        },
                        new
                        {
                            ID = 4,
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9cD-r13pJWK--ScPagu2uFM7UQ0yjPpRhEktsO0e5vRb0KeULOexclEBcw2qq4YkyYjI&usqp=CAU",
                            IntroID = 2,
                            LanguageCode = "UR",
                            Text = "Lorem Ipsum کے اقتباسات کے بہت سے تغیرات دستیاب ہیں، لیکن اکثریت کو کسی نہ کسی شکل میں، انجکشن شدہ مزاح، یا بے ترتیب الفاظ کے ذریعے تبدیلی کا سامنا کرنا پڑا ہے جو قدرے قابل اعتبار بھی نہیں لگتے ہیں۔"
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblLanguages", b =>
                {
                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LanguageCode");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageCode = "EN",
                            LanguageName = "English",
                            Status = 1
                        },
                        new
                        {
                            LanguageCode = "UR",
                            LanguageName = "اردو (Urdu)",
                            Status = 1
                        },
                        new
                        {
                            LanguageCode = "PA",
                            LanguageName = "پنجابی (Punjabi)",
                            Status = 0
                        },
                        new
                        {
                            LanguageCode = "PS",
                            LanguageName = "پښتو (Pashto)",
                            Status = 0
                        },
                        new
                        {
                            LanguageCode = "SD",
                            LanguageName = "سنڌي (Sindhi)",
                            Status = 0
                        },
                        new
                        {
                            LanguageCode = "SK",
                            LanguageName = "سرائیکی (Saraiki)",
                            Status = 0
                        },
                        new
                        {
                            LanguageCode = "BL",
                            LanguageName = "بلوچی (Balochi)",
                            Status = 0
                        },
                        new
                        {
                            LanguageCode = "KS",
                            LanguageName = "کٲشُر (Kashmiri)",
                            Status = 0
                        },
                        new
                        {
                            LanguageCode = "BH",
                            LanguageName = "بروہی (Brahui)",
                            Status = 0
                        },
                        new
                        {
                            LanguageCode = "SN",
                            LanguageName = "شینا (Shina)",
                            Status = 0
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblMonth", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Months");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblMonthTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("MonthID");

                    b.ToTable("MonthTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblNavigationModule", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"), 1L, 1);

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModuleOrder")
                        .HasColumnType("int");

                    b.Property<bool>("ShowInMenu")
                        .HasColumnType("bit");

                    b.HasKey("ModuleId");

                    b.ToTable("tblNavigationModule", (string)null);

                    b.HasData(
                        new
                        {
                            ModuleId = 1,
                            IsActive = 1,
                            ModuleName = "Dashboard",
                            ModuleOrder = 1,
                            ShowInMenu = true
                        },
                        new
                        {
                            ModuleId = 2,
                            IsActive = 1,
                            ModuleName = "Farmer Management",
                            ModuleOrder = 2,
                            ShowInMenu = true
                        },
                        new
                        {
                            ModuleId = 3,
                            IsActive = 1,
                            ModuleName = "Role Management",
                            ModuleOrder = 2,
                            ShowInMenu = true
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblOrderProducts", b =>
                {
                    b.Property<int>("RecID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecID"), 1L, 1);

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("RecID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblOrders", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"), 1L, 1);

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("CreatedByID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblPage", b =>
                {
                    b.Property<int>("PageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PageID"), 1L, 1);

                    b.Property<string>("ActionMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<int>("ModuleID")
                        .HasColumnType("int");

                    b.Property<string>("PageIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PageOrder")
                        .HasColumnType("int");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectModule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowOnMenu")
                        .HasColumnType("bit");

                    b.HasKey("PageID");

                    b.HasIndex("ModuleID");

                    b.ToTable("tblPage", (string)null);

                    b.HasData(
                        new
                        {
                            PageID = 1,
                            ActionMethod = "Index",
                            Controller = "Dashboard",
                            IsActive = 1,
                            ModuleID = 1,
                            PageIcon = "",
                            PageName = "Dashboard",
                            PageOrder = 1,
                            PageUrl = "/Dashboard",
                            ProjectModule = "DMS",
                            ShowOnMenu = true
                        },
                        new
                        {
                            PageID = 2,
                            ActionMethod = "Index",
                            Controller = "Dashboard",
                            IsActive = 1,
                            ModuleID = 1,
                            PageIcon = "",
                            PageName = "Dashboard",
                            PageOrder = 2,
                            PageUrl = "/Dashboard",
                            ProjectModule = "DMS",
                            ShowOnMenu = true
                        },
                        new
                        {
                            PageID = 3,
                            ActionMethod = "Create",
                            Controller = "Farmer",
                            IsActive = 1,
                            ModuleID = 2,
                            PageIcon = "",
                            PageName = "Create Farmer",
                            PageOrder = 1,
                            PageUrl = "/Employee/Farmer/Create",
                            ProjectModule = "DMS",
                            ShowOnMenu = true
                        },
                        new
                        {
                            PageID = 4,
                            ActionMethod = "Farmer",
                            Controller = "Farmer",
                            IsActive = 1,
                            ModuleID = 2,
                            PageIcon = "",
                            PageName = "Farmers",
                            PageOrder = 2,
                            PageUrl = "/Employee/Farmer",
                            ProjectModule = "DMS",
                            ShowOnMenu = true
                        },
                        new
                        {
                            PageID = 5,
                            ActionMethod = "Index",
                            Controller = "RoleManager",
                            IsActive = 1,
                            ModuleID = 3,
                            PageIcon = "",
                            PageName = "Role Manager",
                            PageOrder = 1,
                            PageUrl = "/RoleManager/",
                            ProjectModule = "DMS",
                            ShowOnMenu = true
                        },
                        new
                        {
                            PageID = 6,
                            ActionMethod = "getRoles",
                            Controller = "RoleManager",
                            IsActive = 1,
                            ModuleID = 3,
                            PageIcon = "",
                            PageName = "get Roles",
                            PageOrder = 2,
                            PageUrl = "/RoleManager/getRoles",
                            ProjectModule = "DMS",
                            ShowOnMenu = false
                        },
                        new
                        {
                            PageID = 7,
                            ActionMethod = "PermissionManager",
                            Controller = "RoleManager",
                            IsActive = 1,
                            ModuleID = 3,
                            PageIcon = "",
                            PageName = "Permission Manager",
                            PageOrder = 3,
                            PageUrl = "/RoleManager/PermissionManager",
                            ProjectModule = "DMS",
                            ShowOnMenu = false
                        },
                        new
                        {
                            PageID = 8,
                            ActionMethod = "getPermissionsByRoleID",
                            Controller = "RoleManager",
                            IsActive = 1,
                            ModuleID = 3,
                            PageIcon = "",
                            PageName = "get Permissions By RoleID",
                            PageOrder = 4,
                            PageUrl = "/RoleManager/getPermissionsByRoleID",
                            ProjectModule = "DMS",
                            ShowOnMenu = false
                        },
                        new
                        {
                            PageID = 9,
                            ActionMethod = "updatePermissions",
                            Controller = "RoleManager",
                            IsActive = 1,
                            ModuleID = 3,
                            PageIcon = "",
                            PageName = "update Permissions",
                            PageOrder = 5,
                            PageUrl = "/RoleManager/updatePermissions",
                            ProjectModule = "DMS",
                            ShowOnMenu = false
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("FarmID")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("FarmID");

                    b.HasIndex("SeasonID");

                    b.HasIndex("UserID");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlanCrops", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<double>("Acre")
                        .HasColumnType("float");

                    b.Property<int>("CropID")
                        .HasColumnType("int");

                    b.Property<int>("PlanID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CropID");

                    b.HasIndex("PlanID");

                    b.ToTable("PlanCrop");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlanProduct", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanCropID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("PlanCropID");

                    b.HasIndex("ProductID");

                    b.ToTable("PlanProduct");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblProduct", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("CreatedByID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = 1,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1288),
                            Name = "UREA",
                            ProductCode = "00001"
                        },
                        new
                        {
                            ID = 2,
                            Active = 1,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1290),
                            Name = "Ammonium Sulphate",
                            ProductCode = "00002"
                        },
                        new
                        {
                            ID = 3,
                            Active = 1,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1292),
                            Name = "Zabardast Urea",
                            ProductCode = "00003"
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "UREA",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            Name = "DAP",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            Name = "Micronutrient",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            Name = "Potash",
                            Status = 1
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductCategoryTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("ProductCategoryID");

                    b.ToTable("ProductCategoryTranslation");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Image = "",
                            LanguageCode = "EN",
                            ProductCategoryID = 1,
                            Text = "UREA"
                        },
                        new
                        {
                            ID = 2,
                            Image = "",
                            LanguageCode = "UR",
                            ProductCategoryID = 1,
                            Text = "یوریا"
                        },
                        new
                        {
                            ID = 3,
                            Image = "",
                            LanguageCode = "EN",
                            ProductCategoryID = 2,
                            Text = "DAP"
                        },
                        new
                        {
                            ID = 4,
                            Image = "",
                            LanguageCode = "UR",
                            ProductCategoryID = 2,
                            Text = "ڈی اے پی"
                        },
                        new
                        {
                            ID = 5,
                            Image = "",
                            LanguageCode = "EN",
                            ProductCategoryID = 3,
                            Text = "Micronutrient"
                        },
                        new
                        {
                            ID = 6,
                            Image = "",
                            LanguageCode = "UR",
                            ProductCategoryID = 3,
                            Text = "مائیکرو نیوٹرینٹ"
                        },
                        new
                        {
                            ID = 7,
                            Image = "",
                            LanguageCode = "EN",
                            ProductCategoryID = 4,
                            Text = "Potash"
                        },
                        new
                        {
                            ID = 8,
                            Image = "",
                            LanguageCode = "UR",
                            ProductCategoryID = 4,
                            Text = "پوٹاش"
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductConsumptionMetrics", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CropID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("TerritoryID")
                        .HasColumnType("int");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Usage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("CropID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductConsumptionMetric");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CropID = 1,
                            ProductID = 1,
                            TerritoryID = 1,
                            UOM = "Bags",
                            Usage = 1.2m
                        },
                        new
                        {
                            ID = 2,
                            CropID = 1,
                            ProductID = 2,
                            TerritoryID = 1,
                            UOM = "Bags",
                            Usage = 2m
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductTranslations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            ProductID = 1,
                            Text = "UREA"
                        },
                        new
                        {
                            ID = 2,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            ProductID = 1,
                            Text = "یوریا"
                        },
                        new
                        {
                            ID = 3,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            ProductID = 2,
                            Text = "Ammonium Sulphate"
                        },
                        new
                        {
                            ID = 4,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            ProductID = 2,
                            Text = "امونیم سلفیٹ"
                        },
                        new
                        {
                            ID = 5,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            ProductID = 3,
                            Text = "Zabardast Urea"
                        },
                        new
                        {
                            ID = 6,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            ProductID = 3,
                            Text = "بھاری یوریا"
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProfileChangeRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CNICNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LeasedLand")
                        .HasColumnType("float");

                    b.Property<string>("NTNNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OwnedLand")
                        .HasColumnType("float");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<string>("SAPFarmerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TehsilID")
                        .HasColumnType("int");

                    b.Property<double>("TotalArea")
                        .HasColumnType("float");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isApproved")
                        .HasColumnType("bit");

                    b.Property<int?>("tblTehsilID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CityID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("TehsilID");

                    b.HasIndex("UserID");

                    b.HasIndex("tblTehsilID");

                    b.ToTable("ProfileChangeRequests");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("tblRole", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClaimValue");

                    b.HasIndex("RoleId");

                    b.ToTable("tblRoleClaim", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblSeason", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Season");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EndDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1032),
                            Name = "Rabbi",
                            StartDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1018),
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            EndDate = new DateTime(2024, 5, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1039),
                            Name = "Kharif",
                            StartDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1039),
                            Status = 1
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblSeasonTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SeasonID")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("SeasonID");

                    b.ToTable("SeasonTranslations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            SeasonID = 1,
                            Translation = "Rabbi"
                        },
                        new
                        {
                            ID = 2,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            SeasonID = 2,
                            Translation = "Kharif"
                        },
                        new
                        {
                            ID = 3,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            SeasonID = 1,
                            Translation = "ربی"
                        },
                        new
                        {
                            ID = 4,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            SeasonID = 2,
                            Translation = "خزاں"
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = 1,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1344),
                            Name = "Soil Sampling"
                        },
                        new
                        {
                            ID = 2,
                            Active = 1,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1346),
                            Name = "Geofencing"
                        },
                        new
                        {
                            ID = 3,
                            Active = 1,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 54, 56, 900, DateTimeKind.Local).AddTicks(1347),
                            Name = "Drone Footage"
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblServiceTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("ServiceID");

                    b.ToTable("ServiceTranslation");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            ServiceID = 1,
                            Text = "Soil Sampling"
                        },
                        new
                        {
                            ID = 2,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            ServiceID = 1,
                            Text = "مٹی کے نمونے لینے"
                        },
                        new
                        {
                            ID = 3,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            ServiceID = 2,
                            Text = "Geofencing"
                        },
                        new
                        {
                            ID = 4,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            ServiceID = 2,
                            Text = "جیوفینسنگ"
                        },
                        new
                        {
                            ID = 5,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "EN",
                            ServiceID = 3,
                            Text = "Drone Footage"
                        },
                        new
                        {
                            ID = 6,
                            Image = "https://w7.pngwing.com/pngs/531/598/png-transparent-computer-icons-crop-agriculture-farmer-grain-miscellaneous-food-leaf.png",
                            LanguageCode = "UR",
                            ServiceID = 3,
                            Text = "ڈرون فوٹیج"
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblTehsil", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Tehsils");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CityID = 1,
                            Name = "Karachi Central",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            CityID = 1,
                            Name = "Karachi East",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            CityID = 1,
                            Name = "Karachi West",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            CityID = 1,
                            Name = "Karachi South",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            CityID = 1,
                            Name = "Malir",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            CityID = 1,
                            Name = "Korangi",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            CityID = 2,
                            Name = "Hyderabad",
                            Status = 1
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblTehsilLanguages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TehsilID")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("TehsilID");

                    b.ToTable("TehsilLanguages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            LanguageCode = "EN",
                            TehsilID = 1,
                            Translation = "Karachi Central"
                        },
                        new
                        {
                            ID = 2,
                            LanguageCode = "UR",
                            TehsilID = 1,
                            Translation = "کراچی سینٹرل"
                        },
                        new
                        {
                            ID = 3,
                            LanguageCode = "EN",
                            TehsilID = 2,
                            Translation = "Karachi East"
                        },
                        new
                        {
                            ID = 4,
                            LanguageCode = "UR",
                            TehsilID = 2,
                            Translation = "کراچی ایسٹ"
                        },
                        new
                        {
                            ID = 5,
                            LanguageCode = "EN",
                            TehsilID = 3,
                            Translation = "Karachi West"
                        },
                        new
                        {
                            ID = 6,
                            LanguageCode = "UR",
                            TehsilID = 3,
                            Translation = "کراچی ویسٹ"
                        },
                        new
                        {
                            ID = 7,
                            LanguageCode = "EN",
                            TehsilID = 4,
                            Translation = "Karachi South"
                        },
                        new
                        {
                            ID = 8,
                            LanguageCode = "UR",
                            TehsilID = 4,
                            Translation = "کراچی جنوبی"
                        },
                        new
                        {
                            ID = 9,
                            LanguageCode = "EN",
                            TehsilID = 5,
                            Translation = "Malir"
                        },
                        new
                        {
                            ID = 10,
                            LanguageCode = "UR",
                            TehsilID = 5,
                            Translation = "ملیر"
                        },
                        new
                        {
                            ID = 11,
                            LanguageCode = "EN",
                            TehsilID = 6,
                            Translation = "Hyderabad"
                        },
                        new
                        {
                            ID = 12,
                            LanguageCode = "UR",
                            TehsilID = 6,
                            Translation = "حیدرآباد"
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Designation")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastPasswordChange")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OTP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SignupAgreementDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("isOTPApproved")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("tblFarmers", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblUserAttachments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("tblAttachmentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.HasIndex("tblAttachmentID");

                    b.ToTable("UserAttachments");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblwarehouse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("latitude")
                        .HasColumnType("float");

                    b.Property<double>("longitude")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("Warehouse");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "WH-Eng-1",
                            Status = 1,
                            latitude = 0.0,
                            longitude = 0.0
                        },
                        new
                        {
                            ID = 2,
                            Name = "WH-Eng-2",
                            Status = 1,
                            latitude = 0.0,
                            longitude = 0.0
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblwarehouseTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("WarehouseTranslation");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            LanguageCode = "EN",
                            Text = "WH-Eng-1",
                            WarehouseID = 1
                        },
                        new
                        {
                            ID = 2,
                            LanguageCode = "EN",
                            Text = "WH-Eng-2",
                            WarehouseID = 2
                        },
                        new
                        {
                            ID = 3,
                            LanguageCode = "UR",
                            Text = "WH-Ur-1",
                            WarehouseID = 1
                        },
                        new
                        {
                            ID = 4,
                            LanguageCode = "UR",
                            Text = "WH-Ur-2",
                            WarehouseID = 2
                        });
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblAttachment", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblAttachmentTypes", "AttachmentType")
                        .WithMany("Attachment")
                        .HasForeignKey("tblAttachmentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachmentType");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblAuthorityLetterDetails", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblAuthorityLetters", "AuthorityLetters")
                        .WithMany("AuthorityLetterDetails")
                        .HasForeignKey("AuthorityLetterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblProduct", "Products")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblProduct", null)
                        .WithMany("AuthorityLetterDetails")
                        .HasForeignKey("TblProductID");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblService", null)
                        .WithMany("AuthorityLetterDetails")
                        .HasForeignKey("tblServiceID");

                    b.Navigation("AuthorityLetters");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblAuthorityLetters", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "CreatedBy")
                        .WithMany("AuthorityLetters")
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblOrders", "Order")
                        .WithMany("AuthorityLetters")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBannerLanguages", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblBanner", "Banner")
                        .WithMany("BannerLanguages")
                        .HasForeignKey("BannerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Languages")
                        .WithMany("BannerLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCity", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany("Cities")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCityLanguages", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCity", "City")
                        .WithMany("CityLanguages")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("CityLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblClaim", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblPage", "TblPage")
                        .WithMany("Claims")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblPage");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblClaimAction", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblClaim", "Claim")
                        .WithMany("ClaimActions")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCropTimings", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCrop", "Crop")
                        .WithMany("CropTimings")
                        .HasForeignKey("CropID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany("CropTimings")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblSeason", "Season")
                        .WithMany("CropTimings")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("District");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCropTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCrop", "Crop")
                        .WithMany("CropTranslations")
                        .HasForeignKey("CropID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("CropTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblDistrictLanguages", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany("DistrictLanguages")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Languages")
                        .WithMany("DistrictLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblfarm", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblFarmApplication", "FarmApplication")
                        .WithMany("Farm")
                        .HasForeignKey("ApplicationID");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCity", "City")
                        .WithMany("farms")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblTehsil", "Tehsil")
                        .WithMany()
                        .HasForeignKey("TehsilID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "Users")
                        .WithMany("farms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", null)
                        .WithMany("farms")
                        .HasForeignKey("tblDistrictID");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblTehsil", null)
                        .WithMany("farms")
                        .HasForeignKey("tblTehsilID");

                    b.Navigation("Approver");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("FarmApplication");

                    b.Navigation("Tehsil");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmAttachments", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblAttachment", "Attachment")
                        .WithMany("FarmAttachments")
                        .HasForeignKey("AttachmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblfarm", "Farm")
                        .WithMany("FarmAttachments")
                        .HasForeignKey("FarmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmChangeRequest", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblFarmApplication", "FarmApplication")
                        .WithMany("FarmChangeRequest")
                        .HasForeignKey("ApplicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCity", "City")
                        .WithMany("tblFarmChangeRequest")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblfarm", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblTehsil", "Tehsil")
                        .WithMany()
                        .HasForeignKey("TehsilID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("tblFarmChangeRequest")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", null)
                        .WithMany("tblFarmChangeRequest")
                        .HasForeignKey("tblDistrictID");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblTehsil", null)
                        .WithMany("FarmChangeRequests")
                        .HasForeignKey("tblTehsilID");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblfarm", null)
                        .WithMany("FarmChangeRequests")
                        .HasForeignKey("tblfarmFarmID");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("Farm");

                    b.Navigation("FarmApplication");

                    b.Navigation("Tehsil");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerClaim", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerLogin", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmerProfile", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCity", "City")
                        .WithMany("FarmerProfiles")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany("FarmerProfiles")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("FarmerProfile")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblTehsil", null)
                        .WithMany("FarmerProfiles")
                        .HasForeignKey("tblTehsilID");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerRole", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblRole", "Role")
                        .WithMany("FarmerRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("FarmerRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerToken", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblHomeSliderLanguages", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblHomeSlider", "HomeSlider")
                        .WithMany("HomeSliderLanguages")
                        .HasForeignKey("HomeSliderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("HomeSliderLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeSlider");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblIntroLanguages", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblIntro", "Intro")
                        .WithMany("IntroLanguages")
                        .HasForeignKey("IntroID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Languages")
                        .WithMany("IntroLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intro");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblMonthTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("MonthTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblMonth", "Month")
                        .WithMany("MonthTranslations")
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Month");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblOrderProducts", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblOrders", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblOrders", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblPage", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblNavigationModule", "NavigationModule")
                        .WithMany("Pages")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NavigationModule");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlan", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblfarm", "Farm")
                        .WithMany("plans")
                        .HasForeignKey("FarmID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblSeason", "Season")
                        .WithMany("plans")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("plans")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlanCrops", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCrop", "Crop")
                        .WithMany("PlanCrops")
                        .HasForeignKey("CropID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblPlan", "Plan")
                        .WithMany("PlanCrops")
                        .HasForeignKey("PlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlanProduct", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblPlanCrops", "PlanCrop")
                        .WithMany("PlanProducts")
                        .HasForeignKey("PlanCropID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblProduct", "Product")
                        .WithMany("PlanProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlanCrop");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblProduct", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "Users")
                        .WithMany("Products")
                        .HasForeignKey("CreatedByID");

                    b.Navigation("Category");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductCategoryTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("ProductCategoryTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblProductCategory", "ProductCategory")
                        .WithMany("ProductCategoryTranslation")
                        .HasForeignKey("ProductCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductConsumptionMetrics", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCrop", "Crop")
                        .WithMany("ProductConsumptionMetrics")
                        .HasForeignKey("CropID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblProduct", "Product")
                        .WithMany("ProductConsumptionMetrics")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblProduct", "Product")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProfileChangeRequest", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCity", "City")
                        .WithMany("ProfileChangeRequest")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany("ProfileChangeRequest")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblTehsil", "Tehsil")
                        .WithMany()
                        .HasForeignKey("TehsilID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("ProfileChangeRequest")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblTehsil", null)
                        .WithMany("ProfileChangeRequest")
                        .HasForeignKey("tblTehsilID");

                    b.Navigation("Approver");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("Tehsil");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblRoleClaim", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblClaim", "Claim")
                        .WithMany("RoleClaims")
                        .HasForeignKey("ClaimValue");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblSeasonTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("SeasonTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblSeason", "Season")
                        .WithMany("SeasonTranslations")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblService", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedByID");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblServiceTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblService", "Service")
                        .WithMany("ServiceTranslations")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblTehsil", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCity", "City")
                        .WithMany("Tehsils")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblTehsilLanguages", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("TehsilLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblTehsil", "Tehsil")
                        .WithMany("TehsilLanguagess")
                        .HasForeignKey("TehsilID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Tehsil");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblUserAttachments", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("UserAttachments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblAttachment", "Attachment")
                        .WithMany("UserAttachments")
                        .HasForeignKey("tblAttachmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblwarehouseTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblwarehouse", "Warehouse")
                        .WithMany("WarehouseTranslation")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblAttachment", b =>
                {
                    b.Navigation("FarmAttachments");

                    b.Navigation("UserAttachments");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblAttachmentTypes", b =>
                {
                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblAuthorityLetters", b =>
                {
                    b.Navigation("AuthorityLetterDetails");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBanner", b =>
                {
                    b.Navigation("BannerLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCity", b =>
                {
                    b.Navigation("CityLanguages");

                    b.Navigation("FarmerProfiles");

                    b.Navigation("ProfileChangeRequest");

                    b.Navigation("Tehsils");

                    b.Navigation("farms");

                    b.Navigation("tblFarmChangeRequest");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblClaim", b =>
                {
                    b.Navigation("ClaimActions");

                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCrop", b =>
                {
                    b.Navigation("CropTimings");

                    b.Navigation("CropTranslations");

                    b.Navigation("PlanCrops");

                    b.Navigation("ProductConsumptionMetrics");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblDistrict", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CropTimings");

                    b.Navigation("DistrictLanguages");

                    b.Navigation("FarmerProfiles");

                    b.Navigation("ProfileChangeRequest");

                    b.Navigation("farms");

                    b.Navigation("tblFarmChangeRequest");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblfarm", b =>
                {
                    b.Navigation("FarmAttachments");

                    b.Navigation("FarmChangeRequests");

                    b.Navigation("plans");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmApplication", b =>
                {
                    b.Navigation("Farm");

                    b.Navigation("FarmChangeRequest");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblHomeSlider", b =>
                {
                    b.Navigation("HomeSliderLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblIntro", b =>
                {
                    b.Navigation("IntroLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblLanguages", b =>
                {
                    b.Navigation("BannerLanguages");

                    b.Navigation("CityLanguages");

                    b.Navigation("CropTranslations");

                    b.Navigation("DistrictLanguages");

                    b.Navigation("HomeSliderLanguages");

                    b.Navigation("IntroLanguages");

                    b.Navigation("MonthTranslations");

                    b.Navigation("ProductCategoryTranslations");

                    b.Navigation("ProductTranslations");

                    b.Navigation("SeasonTranslations");

                    b.Navigation("TehsilLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblMonth", b =>
                {
                    b.Navigation("MonthTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblNavigationModule", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblOrders", b =>
                {
                    b.Navigation("AuthorityLetters");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblPage", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlan", b =>
                {
                    b.Navigation("PlanCrops");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlanCrops", b =>
                {
                    b.Navigation("PlanProducts");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblProduct", b =>
                {
                    b.Navigation("AuthorityLetterDetails");

                    b.Navigation("PlanProducts");

                    b.Navigation("ProductConsumptionMetrics");

                    b.Navigation("ProductTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductCategory", b =>
                {
                    b.Navigation("ProductCategoryTranslation");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblRole", b =>
                {
                    b.Navigation("FarmerRoles");

                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblSeason", b =>
                {
                    b.Navigation("CropTimings");

                    b.Navigation("SeasonTranslations");

                    b.Navigation("plans");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblService", b =>
                {
                    b.Navigation("AuthorityLetterDetails");

                    b.Navigation("ServiceTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblTehsil", b =>
                {
                    b.Navigation("FarmChangeRequests");

                    b.Navigation("FarmerProfiles");

                    b.Navigation("ProfileChangeRequest");

                    b.Navigation("TehsilLanguagess");

                    b.Navigation("farms");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblUser", b =>
                {
                    b.Navigation("AuthorityLetters");

                    b.Navigation("Claims");

                    b.Navigation("FarmerProfile");

                    b.Navigation("FarmerRoles");

                    b.Navigation("Logins");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("ProfileChangeRequest");

                    b.Navigation("Tokens");

                    b.Navigation("UserAttachments");

                    b.Navigation("farms");

                    b.Navigation("plans");

                    b.Navigation("tblFarmChangeRequest");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblwarehouse", b =>
                {
                    b.Navigation("WarehouseTranslation");
                });
#pragma warning restore 612, 618
        }
    }
}
