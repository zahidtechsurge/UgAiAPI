// <auto-generated />
using System;
using AmazonFarmer.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AmazonFarmer.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AmazonFarmerContext))]
    [Migration("20240623165457_ActiveTOkens")]
    partial class ActiveTOkens
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.ActiveToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ActiveTokens");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.FarmUpdateLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FarmUpdateLog");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.NotificationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NotificationLog");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.PaymentAcknowledgment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsumerNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatePaid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<int>("FileID")
                        .HasColumnType("int");

                    b.Property<string>("MaskedConsumerNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("STAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettlementDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TimePaid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trans_Auth_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileID");

                    b.ToTable("PaymentAcknowledgments");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.PaymentAcknowledgmentFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowsCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentAcknowledgmentFiles");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.RequestLog", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.ToTable("RequestLogs");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.ResponseLog", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ResponseId");

                    b.HasIndex("RequestId");

                    b.ToTable("ResponseLogs");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblAuthorityLetterDetails", b =>
                {
                    b.Property<int>("RecID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecID"));

                    b.Property<int>("AuthorityLetterID")
                        .HasColumnType("int");

                    b.Property<int>("BagQuantity")
                        .HasColumnType("int");

                    b.Property<string>("BiltyNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("TruckerNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("tblServiceID")
                        .HasColumnType("int");

                    b.HasKey("RecID");

                    b.HasIndex("AuthorityLetterID");

                    b.HasIndex("ProductID");

                    b.HasIndex("tblServiceID");

                    b.ToTable("AuthorityLetterDetails");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblAuthorityLetters", b =>
                {
                    b.Property<int>("AuthorityLetterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorityLetterID"));

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<int?>("AttachmentID")
                        .HasColumnType("int");

                    b.Property<string>("AuthorityLetterNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BearerNIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BearerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Dated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldWHIncharge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INVNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOCRAutomated")
                        .HasColumnType("bit");

                    b.Property<long>("OrderID")
                        .HasColumnType("bigint");

                    b.Property<string>("SAPFarmerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("WareHouseID")
                        .HasColumnType("int");

                    b.HasKey("AuthorityLetterID");

                    b.HasIndex("AttachmentID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("OrderID");

                    b.HasIndex("WareHouseID");

                    b.ToTable("AuthorityLetters");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblClaim", b =>
                {
                    b.Property<string>("ClaimId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.HasKey("ClaimId");

                    b.HasIndex("PageId");

                    b.ToTable("tblClaim", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblClaimAction", b =>
                {
                    b.Property<string>("ClaimActionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClaimActionId");

                    b.HasIndex("ClaimId");

                    b.ToTable("tblClaimAction", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblEmployeeDistrictAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DitrictID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DitrictID");

                    b.HasIndex("UserID");

                    b.ToTable("EmployeeDistrictAssignments");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblEmployeeRegionAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RegionID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("tblDistrictID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionID");

                    b.HasIndex("UserID");

                    b.HasIndex("tblDistrictID");

                    b.ToTable("EmployeeRegionAssignments");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tblFarmerClaim", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("tblFarmerLogin", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("tblFarmerRole", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("tblFarmerToken", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblNavigationModule", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModuleOrder")
                        .HasColumnType("int");

                    b.Property<bool>("ShowInMenu")
                        .HasColumnType("bit");

                    b.HasKey("ModuleId");

                    b.ToTable("tblNavigationModule", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblOrderLog", b =>
                {
                    b.Property<int>("OrderLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderLogId"));

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<long>("OrderID")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderLogId");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderLogs");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblOrderProducts", b =>
                {
                    b.Property<int>("OrderProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderProductID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClosingQTY")
                        .HasColumnType("int");

                    b.Property<long>("OrderID")
                        .HasColumnType("bigint");

                    b.Property<int?>("PlanProductID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("QTY")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderProductID");

                    b.HasIndex("OrderID");

                    b.HasIndex("PlanProductID")
                        .IsUnique()
                        .HasFilter("[PlanProductID] IS NOT NULL");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblOrderService", b =>
                {
                    b.Property<int>("OrderServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderServiceID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClosingQTY")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CropID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LandPreparationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastHarvestDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlanID")
                        .HasColumnType("int");

                    b.Property<int>("QTY")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScehduledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SewingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("VendorStatus")
                        .HasColumnType("int");

                    b.HasKey("OrderServiceID");

                    b.HasIndex("PlanID");

                    b.HasIndex("ServiceID");

                    b.ToTable("OrderServices");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblOrders", b =>
                {
                    b.Property<long>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderID"));

                    b.Property<decimal>("AdvancePercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ApprovalDatePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CropID")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("DuePaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FiscalYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InvoicedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("InvoicedDatePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsConsumed")
                        .HasColumnType("bit");

                    b.Property<string>("OneLinkTransactionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrderAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OrderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderRandomTransactionID")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<long?>("ParentOrderID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PaymentDatePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("PlanID")
                        .HasColumnType("int");

                    b.Property<decimal>("ReconciliationAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SAPOrderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SAPTransactionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.Property<bool>("isLocked")
                        .HasColumnType("bit");

                    b.HasKey("OrderID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("CropID");

                    b.HasIndex("ParentOrderID");

                    b.HasIndex("PlanID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblPage", b =>
                {
                    b.Property<int>("PageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PageID"));

                    b.Property<string>("ActionMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<int>("ModuleID")
                        .HasColumnType("int");

                    b.Property<string>("PageIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PageOrder")
                        .HasColumnType("int");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectModule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowOnMenu")
                        .HasColumnType("bit");

                    b.HasKey("PageID");

                    b.HasIndex("ModuleID");

                    b.ToTable("tblPage", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblProduct", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Division")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesOrg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UOMID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("UOMID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("eRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("tblRole", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClaimValue");

                    b.HasIndex("RoleId");

                    b.ToTable("tblRoleClaim", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Designation")
                        .HasColumnType("int");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastPasswordChange")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OTP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OTPExpiredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SignupAgreementDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("WrongPasswordAttempt")
                        .HasColumnType("int");

                    b.Property<bool>("isAccountLocked")
                        .HasColumnType("bit");

                    b.Property<bool?>("isOTPApproved")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("tblFarmers", (string)null);
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.WSDLLog", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResponseTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.ToTable("WSDLLogs");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblAttachment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("tblAttachmentTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("tblAttachmentTypeID");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblAttachmentTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AttachmentType")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AttachmentType");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblAuthorityLetter_Hexs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("HexaNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("AuthorityLetterHexs");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBanner", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BannerType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBannerLanguages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BannerID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("BannerID");

                    b.HasIndex("LanguageCode");

                    b.ToTable("BannerLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBillingIquiryRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankMnemonic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsumerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrderID")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reserved")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.ToTable("BillingIquiryRequest");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBillingIquiryResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AmountAfterDueDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmountPaid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmountWithInDueDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BillingInquiryRequestID")
                        .HasColumnType("int");

                    b.Property<string>("BillingMonth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsumerDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsumerNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DatePaid")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reserved")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResponseTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimePaid")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tran_auth_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BillingInquiryRequestID");

                    b.ToTable("BillingIquiryResponse");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBillingPaymentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankMemonic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrderID")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reserved")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tran_Auth_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("consumer_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.ToTable("BillingPaymentRequest");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBillingPaymentResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillingPaymentRequestID")
                        .HasColumnType("int");

                    b.Property<string>("Identification_parameter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reserved")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResponseTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Response_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BillingPaymentRequestID");

                    b.ToTable("BillingPaymentResponse");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCityLanguages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CityLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConfigurationTable");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCrop", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCropTimings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CropID")
                        .HasColumnType("int");

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeasonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CropID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("SeasonID");

                    b.ToTable("CropTimings");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCropTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CropID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CropID");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CropTranslation");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblDeviceNotificationTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DeviceNotificationID")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DeviceNotificationID");

                    b.HasIndex("LanguageCode");

                    b.ToTable("DeviceNotificationTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblDeviceNotifications", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.ToTable("DeviceNotification");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblDistrict", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegionId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblDistrictLanguages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("LanguageCode");

                    b.ToTable("DistrictLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblEmailNotifications", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("EmailNotifications");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmApplication", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ApplicationTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("FarmApplication");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmAttachments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AttachmentID")
                        .HasColumnType("int");

                    b.Property<int>("FarmID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AttachmentID");

                    b.HasIndex("FarmID");

                    b.ToTable("FarmAttachments");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmChangeRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("Acreage")
                        .HasColumnType("float");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicationID")
                        .HasColumnType("int");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<int?>("FarmID")
                        .HasColumnType("int");

                    b.Property<string>("FarmName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmerComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<string>("SAPFarmCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TehsilID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("isFarmApprovalAcknowledged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("isFarmApprovalAcknowledgedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isLeased")
                        .HasColumnType("bit");

                    b.Property<bool>("isPrimary")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationID");

                    b.HasIndex("CityID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("FarmID");

                    b.HasIndex("TehsilID");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserID");

                    b.ToTable("FarmChangeRequests");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmerProfile", b =>
                {
                    b.Property<int>("ProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileID"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedByID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CNICNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeasedLand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NTNNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnedLand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SAPFarmerCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("STRNNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedLangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalArea")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("isApproved")
                        .HasColumnType("int");

                    b.Property<int?>("tblTehsilID")
                        .HasColumnType("int");

                    b.HasKey("ProfileID");

                    b.HasIndex("CityID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("UserID");

                    b.HasIndex("tblTehsilID");

                    b.ToTable("FarmerProfile");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblHomeSlider", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("HomeSliders");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblHomeSliderLanguages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("HomeSliderID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("HomeSliderID");

                    b.HasIndex("LanguageCode");

                    b.ToTable("HomeSliderLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblIntro", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Intros");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblIntroLanguages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntroID")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("IntroID");

                    b.HasIndex("LanguageCode");

                    b.ToTable("IntroLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblLanguages", b =>
                {
                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LanguageCode");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblMonth", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("orderBy")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SeasonID");

                    b.ToTable("Months");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblMonthTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("MonthID");

                    b.ToTable("MonthTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblNotification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("ClickedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeviceNotificationID")
                        .HasColumnType("int");

                    b.Property<int?>("FarmID")
                        .HasColumnType("int");

                    b.Property<bool>("IsClicked")
                        .HasColumnType("bit");

                    b.Property<long?>("OrderID")
                        .HasColumnType("bigint");

                    b.Property<int?>("PlanID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("DeviceNotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FarmID")
                        .HasColumnType("int");

                    b.Property<string>("FarmerComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPlanPaid")
                        .HasColumnType("bit");

                    b.Property<int>("PlanChangeStatus")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FarmID");

                    b.HasIndex("SeasonID");

                    b.HasIndex("UserID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlanCrops", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("Acre")
                        .HasColumnType("float");

                    b.Property<int>("CropID")
                        .HasColumnType("int");

                    b.Property<int>("PlanCropEndorse")
                        .HasColumnType("int");

                    b.Property<int>("PlanID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CropID");

                    b.HasIndex("PlanID");

                    b.ToTable("PlanCrop");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlanProduct", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveredQty")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("PlanCropID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PlanCropID");

                    b.HasIndex("ProductID");

                    b.ToTable("PlanProduct");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlanService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("LandPreparationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastHarvestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanCropID")
                        .HasColumnType("int");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SewingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PlanCropID");

                    b.HasIndex("ServiceID");

                    b.ToTable("PlanService");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductCategoryTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("ProductCategoryID");

                    b.ToTable("ProductCategoryTranslation");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductConsumptionMetrics", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CropID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("TerritoryID")
                        .HasColumnType("int");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Usage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("CropID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductConsumptionMetric");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProfileChangeRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CNICNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LeasedLand")
                        .HasColumnType("float");

                    b.Property<string>("NTNNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OwnedLand")
                        .HasColumnType("float");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<string>("SAPFarmerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TehsilID")
                        .HasColumnType("int");

                    b.Property<double>("TotalArea")
                        .HasColumnType("float");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isApproved")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CityID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("TehsilID");

                    b.HasIndex("UserID");

                    b.ToTable("ProfileChangeRequests");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblReasonTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ReasonID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("ReasonID");

                    b.ToTable("ReasonTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblReasons", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReasonForID")
                        .HasColumnType("int");

                    b.Property<int>("ReasonOfID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Reasons");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblRegion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblRegionLanguages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RegionID")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("RegionID");

                    b.ToTable("RegionLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblSeason", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblSeasonTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SeasonID")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("SeasonID");

                    b.ToTable("SeasonTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblServiceTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("ServiceID");

                    b.ToTable("ServiceTranslation");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblTehsil", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TehsilCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Tehsils");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblTehsilLanguages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TehsilID")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("TehsilID");

                    b.ToTable("TehsilLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BillPaymentRequestID")
                        .HasColumnType("int");

                    b.Property<string>("ConsumerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderID")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaidTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SAPInvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SAPOrderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tran_Auth_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillPaymentRequestID");

                    b.HasIndex("OrderID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblTransactionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionID");

                    b.ToTable("TransactionLogs");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblUnitOfMeasure", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tblUnitOfMeasures");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblUnitOfMeasureTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UOMID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("UOMID");

                    b.ToTable("UnitOfMeasureTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblUserAttachments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("tblAttachmentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.HasIndex("tblAttachmentID");

                    b.ToTable("UserAttachments");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblWeatherIcon", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeatherType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("WeatherIcon");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblWeatherIconTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeatherID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("WeatherID");

                    b.ToTable("WeatherIconTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblfarm", b =>
                {
                    b.Property<int>("FarmID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmID"));

                    b.Property<int>("Acreage")
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApplicationID")
                        .HasColumnType("int");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("FarmName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmerComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReasonID")
                        .HasColumnType("int");

                    b.Property<string>("RevertedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SAPFarmCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TehsilID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("isFarmApprovalAcknowledged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("isFarmApprovalAcknowledgedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isLeased")
                        .HasColumnType("bit");

                    b.Property<bool>("isPrimary")
                        .HasColumnType("bit");

                    b.Property<double?>("latitude")
                        .HasColumnType("float");

                    b.Property<double?>("longitude")
                        .HasColumnType("float");

                    b.HasKey("FarmID");

                    b.HasIndex("ApplicationID");

                    b.HasIndex("CityID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("ReasonID");

                    b.HasIndex("TehsilID");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserID");

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblwarehouse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("InchargeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalePoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WHCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("latitude")
                        .HasColumnType("float");

                    b.Property<double>("longitude")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("InchargeID");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblwarehouseTranslation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("WarehouseTranslation");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.ActiveToken", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithOne("Token")
                        .HasForeignKey("AmazonFarmer.Core.Domain.Entities.ActiveToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.PaymentAcknowledgment", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.PaymentAcknowledgmentFile", "PaymentAcknowledgmentFile")
                        .WithMany("PaymentAcknowledgments")
                        .HasForeignKey("FileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentAcknowledgmentFile");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.ResponseLog", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.RequestLog", "Request")
                        .WithMany("Responses")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblAuthorityLetterDetails", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblAuthorityLetters", "AuthorityLetters")
                        .WithMany("AuthorityLetterDetails")
                        .HasForeignKey("AuthorityLetterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblProduct", "Products")
                        .WithMany("AuthorityLetterDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblService", null)
                        .WithMany("AuthorityLetterDetails")
                        .HasForeignKey("tblServiceID");

                    b.Navigation("AuthorityLetters");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblAuthorityLetters", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblAttachment", "Attachment")
                        .WithMany("AuthorityLetters")
                        .HasForeignKey("AttachmentID");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "CreatedBy")
                        .WithMany("AuthorityLetters")
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblOrders", "Order")
                        .WithMany("AuthorityLetters")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblwarehouse", "Warehouse")
                        .WithMany("AuthorityLetters")
                        .HasForeignKey("WareHouseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("CreatedBy");

                    b.Navigation("Order");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblClaim", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblPage", "TblPage")
                        .WithMany("Claims")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblPage");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblClaimAction", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblClaim", "Claim")
                        .WithMany("ClaimActions")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblEmployeeDistrictAssignment", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DitrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("EmployeeDistricts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblEmployeeRegionAssignment", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblRegion", "Region")
                        .WithMany("EmployeeRegions")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("EmployeeRegions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", null)
                        .WithMany("EmployeeDistricts")
                        .HasForeignKey("tblDistrictID");

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerClaim", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerLogin", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerRole", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblRole", "Role")
                        .WithMany("FarmerRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("FarmerRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblFarmerToken", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblOrderLog", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblOrders", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblOrderProducts", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblOrders", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblPlanProduct", "PlanProduct")
                        .WithOne("OrderProduct")
                        .HasForeignKey("AmazonFarmer.Core.Domain.Entities.TblOrderProducts", "PlanProductID");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PlanProduct");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblOrderService", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblPlan", "Plan")
                        .WithMany("OrderServices")
                        .HasForeignKey("PlanID");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblService", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblOrders", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCrop", "Crop")
                        .WithMany("Orders")
                        .HasForeignKey("CropID");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblOrders", "ParentOrder")
                        .WithMany("ChildOrders")
                        .HasForeignKey("ParentOrderID");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblPlan", "Plan")
                        .WithMany("Orders")
                        .HasForeignKey("PlanID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblwarehouse", "Warehouse")
                        .WithMany("Orders")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("ParentOrder");

                    b.Navigation("Plan");

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblPage", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblNavigationModule", "NavigationModule")
                        .WithMany("Pages")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NavigationModule");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblProduct", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "Users")
                        .WithMany("Products")
                        .HasForeignKey("CreatedByID");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblUnitOfMeasure", "UOM")
                        .WithMany("Products")
                        .HasForeignKey("UOMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UOM");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblRoleClaim", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblClaim", "Claim")
                        .WithMany("RoleClaims")
                        .HasForeignKey("ClaimValue");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblAttachment", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblAttachmentTypes", "AttachmentTypes")
                        .WithMany("Attachment")
                        .HasForeignKey("tblAttachmentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachmentTypes");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBannerLanguages", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblBanner", "Banner")
                        .WithMany("BannerLanguages")
                        .HasForeignKey("BannerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Languages")
                        .WithMany("BannerLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBillingIquiryRequest", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblOrders", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBillingIquiryResponse", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblBillingIquiryRequest", "BillingInquiryRequest")
                        .WithMany("BillingIquiryResponses")
                        .HasForeignKey("BillingInquiryRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingInquiryRequest");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBillingPaymentRequest", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblOrders", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBillingPaymentResponse", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblBillingPaymentRequest", "BillingPaymentRequest")
                        .WithMany("BillingPaymentResponses")
                        .HasForeignKey("BillingPaymentRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingPaymentRequest");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCity", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany("Cities")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCityLanguages", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCity", "City")
                        .WithMany("CityLanguages")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("CityLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCropTimings", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCrop", "Crop")
                        .WithMany("CropTimings")
                        .HasForeignKey("CropID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany("CropTimings")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblSeason", "Season")
                        .WithMany("CropTimings")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("District");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCropTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCrop", "Crop")
                        .WithMany("CropTranslations")
                        .HasForeignKey("CropID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("CropTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblDeviceNotificationTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDeviceNotifications", "DeviceNotification")
                        .WithMany("DeviceNotificationTranslations")
                        .HasForeignKey("DeviceNotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("DeviceNotificationTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceNotification");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblDistrict", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblRegion", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblDistrictLanguages", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany("DistrictLanguages")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Languages")
                        .WithMany("DistrictLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmAttachments", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblAttachment", "Attachment")
                        .WithMany("FarmAttachments")
                        .HasForeignKey("AttachmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblfarm", "Farm")
                        .WithMany("FarmAttachments")
                        .HasForeignKey("FarmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmChangeRequest", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblFarmApplication", "FarmApplication")
                        .WithMany("FarmChangeRequest")
                        .HasForeignKey("ApplicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCity", "City")
                        .WithMany("tblFarmChangeRequest")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany("tblFarmChangeRequest")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblfarm", "Farm")
                        .WithMany("FarmChangeRequests")
                        .HasForeignKey("FarmID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblTehsil", "Tehsil")
                        .WithMany("FarmChangeRequests")
                        .HasForeignKey("TehsilID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("tblFarmChangeRequest")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("Farm");

                    b.Navigation("FarmApplication");

                    b.Navigation("Tehsil");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmerProfile", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCity", "City")
                        .WithMany("FarmerProfiles")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany("FarmerProfiles")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("FarmerProfile")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblTehsil", null)
                        .WithMany("FarmerProfiles")
                        .HasForeignKey("tblTehsilID");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblHomeSliderLanguages", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblHomeSlider", "HomeSlider")
                        .WithMany("HomeSliderLanguages")
                        .HasForeignKey("HomeSliderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("HomeSliderLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeSlider");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblIntroLanguages", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblIntro", "Intro")
                        .WithMany("IntroLanguages")
                        .HasForeignKey("IntroID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Languages")
                        .WithMany("IntroLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intro");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblMonth", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblSeason", "Season")
                        .WithMany("Months")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblMonthTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("MonthTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblMonth", "Month")
                        .WithMany("MonthTranslations")
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Month");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblNotification", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDeviceNotifications", "DeviceNotification")
                        .WithMany("Notifications")
                        .HasForeignKey("DeviceNotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceNotification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlan", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblfarm", "Farm")
                        .WithMany("plans")
                        .HasForeignKey("FarmID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblSeason", "Season")
                        .WithMany("plans")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("plans")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblwarehouse", "Warehouse")
                        .WithMany("Plans")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("Season");

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlanCrops", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCrop", "Crop")
                        .WithMany("PlanCrops")
                        .HasForeignKey("CropID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblPlan", "Plan")
                        .WithMany("PlanCrops")
                        .HasForeignKey("PlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlanProduct", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblPlanCrops", "PlanCrop")
                        .WithMany("PlanProducts")
                        .HasForeignKey("PlanCropID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblProduct", "Product")
                        .WithMany("PlanProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlanCrop");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlanService", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblPlanCrops", "PlanCrop")
                        .WithMany("PlanServices")
                        .HasForeignKey("PlanCropID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblService", "Service")
                        .WithMany("PlannedServices")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanCrop");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductCategoryTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("ProductCategoryTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblProductCategory", "ProductCategory")
                        .WithMany("ProductCategoryTranslation")
                        .HasForeignKey("ProductCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductConsumptionMetrics", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCrop", "Crop")
                        .WithMany("ProductConsumptionMetrics")
                        .HasForeignKey("CropID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblProduct", "Product")
                        .WithMany("ProductConsumptionMetrics")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblProduct", "Product")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProfileChangeRequest", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCity", "City")
                        .WithMany("ProfileChangeRequest")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany("ProfileChangeRequest")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblTehsil", "Tehsil")
                        .WithMany("ProfileChangeRequest")
                        .HasForeignKey("TehsilID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("ProfileChangeRequest")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("Tehsil");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblReasonTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Languages")
                        .WithMany("ReasonTranslation")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblReasons", "Reason")
                        .WithMany("ReasonTranslation")
                        .HasForeignKey("ReasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Languages");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblRegionLanguages", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblRegion", "Region")
                        .WithMany("RegionLanguages")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblSeasonTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("SeasonTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblSeason", "Season")
                        .WithMany("SeasonTranslations")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblService", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedByID");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblServiceTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblService", "Service")
                        .WithMany("ServiceTranslations")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblTehsil", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCity", "City")
                        .WithMany("Tehsils")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblTehsilLanguages", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("TehsilLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblTehsil", "Tehsil")
                        .WithMany("TehsilLanguagess")
                        .HasForeignKey("TehsilID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Tehsil");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblTransaction", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblBillingPaymentRequest", "BillingPaymentRequest")
                        .WithMany("Transactions")
                        .HasForeignKey("BillPaymentRequestID");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblOrders", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingPaymentRequest");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblTransactionLog", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblTransaction", "Transaction")
                        .WithMany("transactionLogs")
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblUnitOfMeasureTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("UnitOfMeasureTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblUnitOfMeasure", "UnitOfMeasure")
                        .WithMany("UnitOfMeasureTranslation")
                        .HasForeignKey("UOMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblUserAttachments", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "User")
                        .WithMany("UserAttachments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblAttachment", "Attachment")
                        .WithMany("UserAttachments")
                        .HasForeignKey("tblAttachmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblWeatherIconTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblLanguages", "Language")
                        .WithMany("WeatherIconTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblWeatherIcon", "WeatherIcon")
                        .WithMany("WeatherIconTranslations")
                        .HasForeignKey("WeatherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("WeatherIcon");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblfarm", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblFarmApplication", "FarmApplication")
                        .WithMany("Farm")
                        .HasForeignKey("ApplicationID");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblCity", "City")
                        .WithMany("farms")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany("farms")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblReasons", "Reasons")
                        .WithMany("Farms")
                        .HasForeignKey("ReasonID");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblTehsil", "Tehsil")
                        .WithMany("farms")
                        .HasForeignKey("TehsilID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "Approver")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "Users")
                        .WithMany("farms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("FarmApplication");

                    b.Navigation("Reasons");

                    b.Navigation("Tehsil");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblwarehouse", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblDistrict", "District")
                        .WithMany("Warehouses")
                        .HasForeignKey("DistrictID");

                    b.HasOne("AmazonFarmer.Core.Domain.Entities.TblUser", "WarehouseIncharge")
                        .WithMany("warehouseIncharge")
                        .HasForeignKey("InchargeID");

                    b.Navigation("District");

                    b.Navigation("WarehouseIncharge");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblwarehouseTranslation", b =>
                {
                    b.HasOne("AmazonFarmer.Core.Domain.Entities.tblwarehouse", "Warehouse")
                        .WithMany("WarehouseTranslation")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.PaymentAcknowledgmentFile", b =>
                {
                    b.Navigation("PaymentAcknowledgments");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.RequestLog", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblAuthorityLetters", b =>
                {
                    b.Navigation("AuthorityLetterDetails");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblClaim", b =>
                {
                    b.Navigation("ClaimActions");

                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblNavigationModule", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblOrders", b =>
                {
                    b.Navigation("AuthorityLetters");

                    b.Navigation("ChildOrders");

                    b.Navigation("Products");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblPage", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblProduct", b =>
                {
                    b.Navigation("AuthorityLetterDetails");

                    b.Navigation("PlanProducts");

                    b.Navigation("ProductConsumptionMetrics");

                    b.Navigation("ProductTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblRole", b =>
                {
                    b.Navigation("FarmerRoles");

                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.TblUser", b =>
                {
                    b.Navigation("AuthorityLetters");

                    b.Navigation("Claims");

                    b.Navigation("EmployeeDistricts");

                    b.Navigation("EmployeeRegions");

                    b.Navigation("FarmerProfile");

                    b.Navigation("FarmerRoles");

                    b.Navigation("Logins");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("ProfileChangeRequest");

                    b.Navigation("Token");

                    b.Navigation("Tokens");

                    b.Navigation("UserAttachments");

                    b.Navigation("farms");

                    b.Navigation("plans");

                    b.Navigation("tblFarmChangeRequest");

                    b.Navigation("warehouseIncharge");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblAttachment", b =>
                {
                    b.Navigation("AuthorityLetters");

                    b.Navigation("FarmAttachments");

                    b.Navigation("UserAttachments");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblAttachmentTypes", b =>
                {
                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBanner", b =>
                {
                    b.Navigation("BannerLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBillingIquiryRequest", b =>
                {
                    b.Navigation("BillingIquiryResponses");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblBillingPaymentRequest", b =>
                {
                    b.Navigation("BillingPaymentResponses");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCity", b =>
                {
                    b.Navigation("CityLanguages");

                    b.Navigation("FarmerProfiles");

                    b.Navigation("ProfileChangeRequest");

                    b.Navigation("Tehsils");

                    b.Navigation("farms");

                    b.Navigation("tblFarmChangeRequest");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblCrop", b =>
                {
                    b.Navigation("CropTimings");

                    b.Navigation("CropTranslations");

                    b.Navigation("Orders");

                    b.Navigation("PlanCrops");

                    b.Navigation("ProductConsumptionMetrics");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblDeviceNotifications", b =>
                {
                    b.Navigation("DeviceNotificationTranslations");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblDistrict", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CropTimings");

                    b.Navigation("DistrictLanguages");

                    b.Navigation("EmployeeDistricts");

                    b.Navigation("FarmerProfiles");

                    b.Navigation("ProfileChangeRequest");

                    b.Navigation("Warehouses");

                    b.Navigation("farms");

                    b.Navigation("tblFarmChangeRequest");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblFarmApplication", b =>
                {
                    b.Navigation("Farm");

                    b.Navigation("FarmChangeRequest");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblHomeSlider", b =>
                {
                    b.Navigation("HomeSliderLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblIntro", b =>
                {
                    b.Navigation("IntroLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblLanguages", b =>
                {
                    b.Navigation("BannerLanguages");

                    b.Navigation("CityLanguages");

                    b.Navigation("CropTranslations");

                    b.Navigation("DeviceNotificationTranslations");

                    b.Navigation("DistrictLanguages");

                    b.Navigation("HomeSliderLanguages");

                    b.Navigation("IntroLanguages");

                    b.Navigation("MonthTranslations");

                    b.Navigation("ProductCategoryTranslations");

                    b.Navigation("ProductTranslations");

                    b.Navigation("ReasonTranslation");

                    b.Navigation("SeasonTranslations");

                    b.Navigation("TehsilLanguages");

                    b.Navigation("UnitOfMeasureTranslations");

                    b.Navigation("WeatherIconTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblMonth", b =>
                {
                    b.Navigation("MonthTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlan", b =>
                {
                    b.Navigation("OrderServices");

                    b.Navigation("Orders");

                    b.Navigation("PlanCrops");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlanCrops", b =>
                {
                    b.Navigation("PlanProducts");

                    b.Navigation("PlanServices");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblPlanProduct", b =>
                {
                    b.Navigation("OrderProduct")
                        .IsRequired();
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblProductCategory", b =>
                {
                    b.Navigation("ProductCategoryTranslation");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblReasons", b =>
                {
                    b.Navigation("Farms");

                    b.Navigation("ReasonTranslation");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblRegion", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("EmployeeRegions");

                    b.Navigation("RegionLanguages");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblSeason", b =>
                {
                    b.Navigation("CropTimings");

                    b.Navigation("Months");

                    b.Navigation("SeasonTranslations");

                    b.Navigation("plans");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblService", b =>
                {
                    b.Navigation("AuthorityLetterDetails");

                    b.Navigation("PlannedServices");

                    b.Navigation("ServiceTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblTehsil", b =>
                {
                    b.Navigation("FarmChangeRequests");

                    b.Navigation("FarmerProfiles");

                    b.Navigation("ProfileChangeRequest");

                    b.Navigation("TehsilLanguagess");

                    b.Navigation("farms");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblTransaction", b =>
                {
                    b.Navigation("transactionLogs");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblUnitOfMeasure", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("UnitOfMeasureTranslation");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblWeatherIcon", b =>
                {
                    b.Navigation("WeatherIconTranslations");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblfarm", b =>
                {
                    b.Navigation("FarmAttachments");

                    b.Navigation("FarmChangeRequests");

                    b.Navigation("plans");
                });

            modelBuilder.Entity("AmazonFarmer.Core.Domain.Entities.tblwarehouse", b =>
                {
                    b.Navigation("AuthorityLetters");

                    b.Navigation("Orders");

                    b.Navigation("Plans");

                    b.Navigation("WarehouseTranslation");
                });
#pragma warning restore 612, 618
        }
    }
}
